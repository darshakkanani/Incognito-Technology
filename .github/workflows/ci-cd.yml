name: Incognito Technology CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Semgrep security scan
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten

  # Frontend Tests and Build
  frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run type checking
        run: npm run type-check

      - name: Run tests
        run: npm test -- --coverage --watchAll=false

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: ./frontend/coverage

      - name: Build application
        run: npm run build

      - name: Build Docker image
        run: docker build -t frontend:${{ github.sha }} .

  # Backend FastAPI Tests and Build
  backend-fastapi:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend/fastapi-service

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Run linting
        run: |
          black --check .
          isort --check-only .
          flake8 .

      - name: Run type checking
        run: mypy .

      - name: Run tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379
        run: pytest --cov=. --cov-report=xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: ./backend/fastapi-service

      - name: Build Docker image
        run: docker build -t fastapi-service:${{ github.sha }} .

  # Backend Node.js Tests and Build
  backend-nodejs:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend/nodejs-service

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: backend/nodejs-service/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        run: npm test -- --coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: ./backend/nodejs-service/coverage

      - name: Build Docker image
        run: docker build -t nodejs-service:${{ github.sha }} .

  # AI/ML Tests and Build
  ai-ml:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./ai-ml

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Run linting
        run: |
          black --check .
          isort --check-only .
          flake8 .

      - name: Run tests
        run: pytest --cov=. --cov-report=xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: ./ai-ml

      - name: Build Docker image
        run: docker build -t ai-ml-service:${{ github.sha }} .

  # Blockchain Tests and Build
  blockchain:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./blockchain

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: blockchain/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Compile smart contracts
        run: npm run compile

      - name: Run smart contract tests
        run: npm test

      - name: Run Slither security analysis
        uses: crytic/slither-action@v0.3.0
        with:
          target: 'blockchain/contracts'

      - name: Build Docker image
        run: docker build -t blockchain-service:${{ github.sha }} .

  # Integration Tests
  integration-tests:
    runs-on: ubuntu-latest
    needs: [frontend, backend-fastapi, backend-nodejs, ai-ml, blockchain]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Start services with docker-compose
        run: |
          docker-compose -f docker-compose.test.yml up -d
          sleep 30

      - name: Run integration tests
        run: |
          npm install -g newman
          newman run tests/postman/integration-tests.json

      - name: Cleanup
        if: always()
        run: docker-compose -f docker-compose.test.yml down

  # Deploy to staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [security-scan, integration-tests]
    if: github.ref == 'refs/heads/develop'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Deploy to EKS staging
        run: |
          aws eks update-kubeconfig --name incognito-staging
          kubectl apply -f devops/kubernetes/staging/
          kubectl rollout status deployment/frontend -n incognito-staging
          kubectl rollout status deployment/backend -n incognito-staging

  # Deploy to production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [security-scan, integration-tests]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Deploy to EKS production
        run: |
          aws eks update-kubeconfig --name incognito-production
          kubectl apply -f devops/kubernetes/production/
          kubectl rollout status deployment/frontend -n incognito-production
          kubectl rollout status deployment/backend -n incognito-production

      - name: Run smoke tests
        run: |
          npm install -g newman
          newman run tests/postman/smoke-tests.json --env-var baseUrl=https://api.incognito-tech.com

  # Security compliance check
  compliance-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: HIPAA Compliance Check
        run: |
          # Run custom HIPAA compliance checks
          python scripts/compliance/hipaa_check.py

      - name: GDPR Compliance Check
        run: |
          # Run custom GDPR compliance checks
          python scripts/compliance/gdpr_check.py

      - name: Generate compliance report
        run: |
          python scripts/compliance/generate_report.py
        
      - name: Upload compliance report
        uses: actions/upload-artifact@v3
        with:
          name: compliance-report
          path: compliance-report.pdf

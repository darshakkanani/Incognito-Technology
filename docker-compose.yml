version: '3.8'

services:
  # Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: ../devops/docker/Dockerfile.frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_BLOCKCHAIN_URL=http://localhost:8545
      - NEXT_PUBLIC_AI_API_URL=http://localhost:8002
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - fastapi-backend
      - nodejs-auth

  # FastAPI Backend Service
  fastapi-backend:
    build:
      context: ./backend/fastapi_app
      dockerfile: ../../devops/docker/Dockerfile.backend
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/incognito_db
      - MONGODB_URL=mongodb://mongo:27017/incognito_logs
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-super-secret-jwt-key
      - BLOCKCHAIN_URL=http://blockchain-node:8545
    volumes:
      - ./backend/fastapi_app:/app
    depends_on:
      - postgres
      - mongo
      - redis

  # Node.js Auth Service
  nodejs-auth:
    build:
      context: ./backend/node_services/auth-service
      dockerfile: ../../../devops/docker/Dockerfile.backend
    ports:
      - "8001:8001"
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/incognito_db
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-super-secret-jwt-key
    volumes:
      - ./backend/node_services/auth-service:/app
      - /app/node_modules
    depends_on:
      - postgres
      - redis

  # Node.js Notification Service
  nodejs-notifications:
    build:
      context: ./backend/node_services/notification-service
      dockerfile: ../../../devops/docker/Dockerfile.backend
    ports:
      - "8002:8002"
    environment:
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./backend/node_services/notification-service:/app
      - /app/node_modules
    depends_on:
      - redis

  # AI/ML Service
  ai-ml-service:
    build:
      context: ./ai_ml
      dockerfile: ../devops/docker/Dockerfile.ai
    ports:
      - "8003:8003"
    environment:
      - MODEL_PATH=/app/models
    volumes:
      - ./ai_ml:/app
      - ./ai_ml/models:/app/models
    depends_on:
      - postgres

  # Blockchain Node
  blockchain-node:
    build:
      context: ./blockchain
      dockerfile: ../devops/docker/Dockerfile.blockchain
    ports:
      - "8545:8545"
      - "8546:8546"
    volumes:
      - ./blockchain:/app
      - blockchain_data:/data
    environment:
      - NETWORK_ID=1337
      - CHAIN_ID=1337

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=incognito_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schemas/users_schema.sql:/docker-entrypoint-initdb.d/01-users.sql
      - ./database/schemas/ehr_schema.sql:/docker-entrypoint-initdb.d/02-ehr.sql
      - ./database/schemas/logs_schema.sql:/docker-entrypoint-initdb.d/03-logs.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5

  # MongoDB Database
  mongo:
    image: mongo:7.0
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
      - MONGO_INITDB_DATABASE=incognito_logs
    volumes:
      - mongo_data:/data/db
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass password
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./devops/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./devops/monitoring/grafana_dashboards:/etc/grafana/provisioning

volumes:
  postgres_data:
  mongo_data:
  redis_data:
  blockchain_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    driver: bridge
